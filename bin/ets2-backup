#!/bin/bash
#
# ets2-backup
# Cria um backup do Euro Truck Simulator 2
#
# Autor     : Flaudísio Tolentino <flaudisio@gmail.com>
# Data      : Thu Aug  7 09:31:50 BRT 2014
# Licença   : Nenhuma.
#
##

# HOME e DIR: separados para evitar a mensagem de alerta do 'tar'
ETS_HOME="$HOME/.local/share"
ETS_DIR="Euro Truck Simulator 2"
ETS_PATH="$ETS_HOME/$ETS_DIR"

# Opções padrões de diretório e arquivo de backup
BACKUP_PREFIX="ets2_"
BACKUP_SUFFIX=""
BACKUP_DIR="$HOME/Dropbox/Jogos/Backups/ETS2"
BACKUP_FILE="$BACKUP_DIR/${BACKUP_PREFIX}$( date +'%Y%m%d-%H%M%S' ).tar.gz"
LAST_BACKUP=""

# Ações do programa
LIST_BACKUPS=0
REPLACE_LAST=0


usage()
{
    cat << EOF
Uso: $( basename "$0" ) [opções] [descrição do backup]

Cria um backup do Euro Truck Simulator 2, adicionando uma descrição
ao nome do arquivo (opcional).

Opções:
    -d, --backup-dir    Diretório onde os backups serão salvos.
    -l, --list          Lista os backups existentes.
    -r, --replace-last  Faz um novo backup, substituindo o anterior.
    -u, --update        O mesmo que -r.
    -h, --help          Esta mensagem.

Exemplos de backup:
    \$BACKUP_DIR/$( basename "$BACKUP_FILE" )
    \$BACKUP_DIR/$( basename "${BACKUP_FILE/.tar.gz/_descrição.tar.gz}" )
EOF
}

die()
{
    [[ "$1" ]] && echo -e "$*" >&2
    exit 1
}

create_archive()
{
    local backupFile="$BACKUP_FILE"
    local targetHome="$1"
    local targetDir="$2"

    [[ -n "$3" ]] && backupFile="$3"

    # Adiciona o sufixo, se existente
    [[ -n "$BACKUP_SUFFIX" ]] &&
        backupFile="${backupFile/.tar.gz/${BACKUP_SUFFIX}.tar.gz}"

    # Opção -C evita a mensagem "tar: Removing leading `/' from member names",
    # visto que o tar sempre espera caminhos relativos, a não ser que a opção -P
    # seja definida (não recomendado!) - http://unix.stackexchange.com/q/59243
    if tar czf "$backupFile" -C "$targetHome" "$targetDir" ; then
        echo "$backupFile"
    else
        echo "Erro ao comprimir arquivo." >&2
        return 1
    fi
}

create_backup()
{
    local backupFile

    # Verifica diretório de destino
    if [[ ! -d "$BACKUP_DIR" ]] ; then
        mkdir -p "$BACKUP_DIR" ||
            die "Erro ao criar diretório de backup."
    fi

    echo "--> Criando backup..."

    backupFile="$( create_archive "$ETS_HOME" "$ETS_DIR" )"

    if [[ -f "$backupFile" ]] ; then
        echo "--> Backup criado com sucesso!"
        echo "    Arquivo: $backupFile"
        echo "    Tamanho: $( du -h "$backupFile" | awk '{ print $1 }' )"

        if [[ "$REPLACE_LAST" -eq 1 && -n "$LAST_BACKUP" ]] ; then
            rm -f "$LAST_BACKUP" && echo "--> Último backup substituído."
        fi
    else
        die "Erro ao criar backup."
    fi
}

list_backups()
{
    local backups

    backups="$( du -hc "$BACKUP_DIR/$BACKUP_PREFIX"*.tar.gz 2> /dev/null )"

    if [[ -z "$backups" || "$backups" =~ ^0.*total$ ]] ; then
        echo "Nenhum backup encontrado."
        return 1
    fi

    echo "--> Backups encontrados:"
    echo "$backups"
    echo "--> Fim da lista."
}

setup_params()
{
    # Caminho completo do arquivo de backup
    BACKUP_FILE="$BACKUP_DIR/${BACKUP_PREFIX}$( date +'%Y%m%d-%H%M%S' ).tar.gz"

    # Último backup
    LAST_BACKUP="$( ls -1 "$BACKUP_DIR/$BACKUP_PREFIX"* 2> /dev/null | tail -n 1 )"
}


[[ ! -d "$ETS_PATH" ]] &&
    die "Erro: diretório do ETS 2 não existe ($ETS_PATH)."


while [[ $# -gt 0 ]] ; do
    case $1 in
        -d|--backup-dir)
            [[ -z "$2" ]] && die "Erro: nenhum diretório de backup selecionado."
            BACKUP_DIR="$2"
            shift 2
        ;;
        -l|--list)
            LIST_BACKUPS=1
            shift
        ;;
        -r|--replace-last|-u|--update)
            REPLACE_LAST=1
            shift
        ;;
        -h|--help)
            usage ; exit 0
        ;;
        -*)
            echo -e "Opção desconhecida: $1\n\n$( usage | head -n 1 )" >&2
            exit 2
        ;;
        *)
            BACKUP_SUFFIX="_$*"
            break
        ;;
    esac
done

# Lista backups
if [[ $LIST_BACKUPS -eq 1 ]] ; then
    list_backups
    exit $?
fi

# Define variáveis, etc.
setup_params

[[ -n "$LAST_BACKUP" ]] &&
    echo "--> Último backup: $( basename "$LAST_BACKUP" )"

# Executa o backup
create_backup

exit $?
